# You must first activate a Billing Account here: https://platform.openai.com/account/billing/overview
# Then get your OpenAI API Key here: https://platform.openai.com/account/api-keys
OPENAI_API_KEY="*******"

# Generate a random secret: https://generate-secret.vercel.app/32 or `openssl rand -base64 32`
AUTH_SECRET="*******"
# Create a GitHub OAuth app here: https://github.com/settings/applications/new
# For info on authorization callback URL visit here: https://authjs.dev/reference/core/providers_github#callback-url
AUTH_GITHUB_ID="xxxxxxxx"
AUTH_GITHUB_SECRET="*******"
# Support OAuth login on preview deployments, see: https://authjs.dev/guides/basics/deployment#securing-a-preview-deployment
# Set the following only when deployed. In this example, we can reuse the same OAuth app, but if you are storing users, we recommend using a different OAuth app for development/production so that you don't mix your test and production user base.
# AUTH_REDIRECT_PROXY_URL=https://YOURAPP.vercel.app/api/auth

# Supabase env
NEXT_PUBLIC_SUPABASE_URL="https://xxx.supabase.co"
SUPABASE_SERVICE_ROLE_KEY="*******"

# Google gemini api key, see https://aistudio.google.com/
GOOGLE_API_KEY="*******"

# Google client setting for google providers, see https://next-auth.js.org/providers/google
GOOGLE_CLIENT_ID="xxxxxxxx"
GOOGLE_CLIENT_SECRET="*******"

GROQ_API_KEY="*******"

# Data storage mode: Set to "local" to save chat data in your browser
# Set to "cloud" to sync data to Supabase.
NEXT_PUBLIC_STORAGE_MODE="local"
# Default model name
NEXT_PUBLIC_DEFAULT_MODEL="gpt-4o-mini"

# It's optional, use Langfuse for tracing cost and score answer, see https://langfuse.com/docs/sdk/typescript/guide
LANGFUSE_SECRET_KEY="*******"
NEXT_PUBLIC_LANGFUSE_PUBLIC_KEY="*******"
NEXT_PUBLIC_LANGFUSE_BASE_URL="xxxxxxxx"
